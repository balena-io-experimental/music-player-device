{
  "name": "lame",
  "description": "NodeJS native bindings to libmp3lame & libmpg123.",
  "keywords": [
    "lame",
    "mpg123",
    "mp3",
    "mpeg",
    "mpg",
    "encode",
    "decode"
  ],
  "version": "1.1.1",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net",
    "url": "http://tootallnate.net"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/node-lame.git"
  },
  "main": "./index.js",
  "dependencies": {
    "bindings": "~1.2.0",
    "debug": "~1.0.0",
    "readable-stream": "1.0"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "scripts": {
    "test": "mocha --reporter spec",
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "node-lame\n=========\n### NodeJS native bindings to libmp3lame & libmpg123\n[![Build Status](https://travis-ci.org/TooTallNate/node-lame.svg?branch=master)](https://travis-ci.org/TooTallNate/node-lame)\n\nFor all your async streaming MP3 encoding/decoding needs, there's `node-lame`!\nThis module hooks into libmp3lame, the library that the `lame` command uses, to\nprovide `Encoder` and `Decoder` streams to NodeJS.\n\n\nInstallation\n------------\n\n`node-lame` comes bundled with its own copy of `libmp3lame` and `libmpg123`, so\nthere's no need to have them installed on your system.\n\nSimply compile and install `node-lame` using `npm`:\n\n``` bash\n$ npm install lame\n```\n\n\nExample\n-------\n\nHere's an example of using `node-lame` to encode some raw PCM data coming from\n`process.stdin` to an MP3 file that gets piped to `process.stdout`:\n\n``` javascript\nvar lame = require('lame');\n\n// create the Encoder instance\nvar encoder = new lame.Encoder({\n  // input\n  channels: 2,        // 2 channels (left and right)\n  bitDepth: 16,       // 16-bit samples\n  sampleRate: 44100   // 44,100 Hz sample rate\n\n  // output\n  bitRate: 128,\n  outSampleRate: 22050,\n  mode: lame.STEREO // STEREO (default), JOINTSTEREO, DUALCHANNEL or MONO\n});\n\n// raw PCM data from stdin gets piped into the encoder\nprocess.stdin.pipe(encoder);\n\n// the generated MP3 file gets piped to stdout\nencoder.pipe(process.stdout);\n```\n\nSee the `examples` directory for some more example code.\n\nAPI\n---\n\n### Decoder class\n\nThe `Decoder` class is a `Stream` subclass that accepts MP3 data written to it,\nand outputs raw PCM data. It also emits a `\"format\"` event when the format of\nthe MP3 file is determined (usually right at the beginning).\n\n### Encoder class\n\nThe `Encoder` class is a `Stream` subclass that accepts raw PCM data written to\nit, and outputs a valid MP3 file. You must specify the PCM data format when\ncreating the encoder instance. Only 16-bit signed samples are currently\nsupported (rescale before passing to the encoder if necessary)...\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TooTallNate/node-lame/issues"
  },
  "homepage": "https://github.com/TooTallNate/node-lame",
  "_id": "lame@1.1.1",
  "dist": {
    "shasum": "1c22d32dc4af83b4b4ef96d50e65f144f8f0e7f9"
  },
  "_from": "lame@~1.1.1",
  "_resolved": "https://registry.npmjs.org/lame/-/lame-1.1.1.tgz"
}
